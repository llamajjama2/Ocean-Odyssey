import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.List;

/**
 * The login class creates a simple login interface using Swing components.
 * It allows users to enter their username and password, register a new account,
 * or proceed as a guest.
 * Debugging and instructor logins already integraded
 * @author Brian, Haadi
 * @version 3.0
 */
public class login extends JFrame implements ActionListener {
    private int width = 375;
    private int length = 175;
    private JButton nextButton;
    private JLabel username;
    private JTextField usernameField;
    private JLabel password;
    private JPasswordField passwordField;
    private JButton registerButton;
    /**
     * Constructs a login object initializing the GUI components.
     * Makes buttons and text fields for users. 
     * Generates new users with registery.
     * 
     */
    private JButton guest;
    public login() {
        setTitle("Login for a better experience!");
        setSize(width, length);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        JPanel contentPane = new JPanel();
        setContentPane(contentPane);
        contentPane.setLayout(null);

        //load image
        username = new JLabel("Username");
        username.setBounds(10, 20, 80, 25);
        usernameField = new JTextField();
        usernameField.setBounds(100, 20, 150, 25);
        
        password = new JLabel("Password");
        password.setBounds(10, 60, 80, 25);
        passwordField = new JPasswordField();
        passwordField.setBounds(100, 60, 150, 25);

        nextButton = new JButton("Enter");
        nextButton.setBounds(255, 60, 70, 25);
        nextButton.addActionListener(this);


        registerButton = new JButton("Register new account");
        registerButton.setBounds(-15, 100, 175, 25);
        registerButton.setBorderPainted(false);
        registerButton.setContentAreaFilled(false);
        contentPane.add(registerButton);


        guest = new JButton("Play as Guest");
        guest.setBounds(150, 100, 175, 25);
        guest.setBorderPainted(false);
        guest.setContentAreaFilled(false);
        guest.addActionListener(this);
        contentPane.add(guest);

        contentPane.add(username);
        contentPane.add(usernameField);
        contentPane.add(password);
        contentPane.add(passwordField);
        contentPane.add(nextButton);
        registerButton.addActionListener(this);
        setVisible(true);
    }

    /**
     * Performs actions based on the event generated by the user.
     * Checks user information user data 
     * @param e The ActionEvent object representing the event.
     */
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == nextButton) {
            List<User> users = Save.getUsers();
            for (User user : users) {
                if (user.getUsername().equals(usernameField.getText())) {
                    if (user.getPassword().equals(passwordField.getText())) {
                        Save.setUser(user);
                        this.dispose();
                        try {
                            Save.saveData();
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }
                        menu menu = new menu();
                    } else {
                        JOptionPane.showMessageDialog(this, "User or Passwords do not match!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

        } else if (e.getSource() == registerButton) {
            int cow = 0;
            String username;
            String password;
            String passwordConfirm;
            while (cow == 0) {
                List<User> users = Save.getUsers();
                username = JOptionPane.showInputDialog(this, "Enter Username:", "Register Account", JOptionPane.PLAIN_MESSAGE);
                if (username == null) {
                    break;
                } else if (doesUsernameExist(username)) {
                    JOptionPane.showMessageDialog(this, "This username already exists! Please select a different username!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else {
                    password = JOptionPane.showInputDialog(this, "Enter Password:", "Register Account", JOptionPane.PLAIN_MESSAGE);
                    if (password == null) break;
                    passwordConfirm = JOptionPane.showInputDialog(this, "Confirm Password:", "Register Account", JOptionPane.PLAIN_MESSAGE);
                    if (passwordConfirm == null) break;
                    System.out.println(username);
                    System.out.println(password);
                    if (password != null && password.equals(passwordConfirm)) {
                        cow = 1;
                        JOptionPane.showMessageDialog(null, "Account Created Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        Save.setUser(new User(username, password));
                        Save.addUser(new User(username, password));
                        try {
                            Save.saveData();
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }
                        this.dispose();
                        menu menu = new menu();
                    } else {
                        JOptionPane.showMessageDialog(this, "Passwords do not match!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else if (e.getSource() == guest) {
            Object[] options = {"Back", "Continue"};
            int n = JOptionPane.showOptionDialog(this,
                    "Heads Up! Your data won't save if you don't login! Are you sure you want continue?",
                    "Warning",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,   
                    options,  
                    options[0]);

            if (n == JOptionPane.YES_OPTION) {
                this.dispose();
                login login = new login();
            } else if (n == JOptionPane.NO_OPTION) {
                this.dispose();
                Save.setUser(new User("Guest", "Guest"));
                menu menu = new menu();
            }
        }
    }
    /**
     * Checks if a given username already exists in the system.
     * @param inputUsername The username to check.
     * @return True if the username already exists, false otherwise.
     */
    private boolean doesUsernameExist(String inputUsername) {
        List<User> users = Save.getUsers();
        for (User user : users) {
            if (user.getUsername().equals(inputUsername)) {
                return true;
            } else if (user.getUsername().equals("Guest")) {
                return true;
            }
        }
        return false;
    }
}
